# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.

name: 'Terraform'

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner, checkout to $GITHUB_WORKSPACE
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Mock scripts
      working-directory: ./setup
      env: 
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      run: | 
        ./setup_customization.sh

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    #- name: Terraform Init
    #  run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  run: terraform apply -auto-approve
    
    # Upload Terraform state file to GCP bucket
    - name: Cloud Storage Uploader
      uses: google-github-actions/upload-cloud-storage@v0.2.0
      with:
        credentials: ${{ secrets.GCP_SA_KEY }}
        path: ${{ github.workspace }}/setup/terraform.state
        destination: shadamn-terraform-bucket
