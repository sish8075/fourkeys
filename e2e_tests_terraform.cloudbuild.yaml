steps:
    # remove any detritus left from prior runs
  - id: Clean
    name: gcr.io/$PROJECT_ID/fourkeys-builder
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        ### Purge state using Terraform
        
        # configure remote terraform backend GCS
        cat > backend.tf <<EOF
        terraform {
          backend "gcs" {
            bucket  = "$_TARGET_PROJECT-tf-state"
            prefix  = "terraform/state"
          }
        }
        EOF

        terraform init
        TF_LOG=$_TF_LOG \
        TF_VAR_google_project_id='$_TARGET_PROJECT' \
        TF_VAR_google_region='us-central1' \
        TF_VAR_bigquery_region='US' \
        TF_VAR_parsers='["cloud-build","github"]' \
        terraform destroy --auto-approve

        ### Delete Terraform state
        gsutil -m rm -r gs://$_TARGET_PROJECT-tf-state/terraform || true

        ### Use gcloud to ensure all resources are gone
        ./ci/project_cleaner.sh --project=$_TARGET_PROJECT || true

        gcloud services disable compute.googleapis.com --project=$_TARGET_PROJECT --force
        gcloud services disable run.googleapis.com --project=$_TARGET_PROJECT --force
        gcloud services disable bigquery.googleapis.com --project=$_TARGET_PROJECT --force 
        gcloud services disable secretmanager.googleapis.com --project=$_TARGET_PROJECT --force

  - id: Install
    name: 'gcr.io/$PROJECT_ID/fourkeys-builder'
    entrypoint: /bin/bash
    dir: "setup"
    args:
      - '-c'
      - |
        # configure remote terraform backend GCS
        cat > backend.tf <<EOF
        terraform {
          backend "gcs" {
            bucket  = "$_TARGET_PROJECT-tf-state"
            prefix  = "terraform/state"
          }
        }
        EOF

        terraform init

        # invoke install script
        GIT_SYSTEM='github' \
        CICD_SYSTEM='cloud-build' \
        PARENT_PROJECT='$PROJECT_ID' \
        FOURKEYS_PROJECT='$_TARGET_PROJECT' \
        FOURKEYS_REGION='us-central1' \
        BIGQUERY_REGION='US' \
        GENERATE_DATA='yes' \
        TF_LOG=$_TF_LOG \
        TF_VAR_google_project_id='$_TARGET_PROJECT' \
        TF_VAR_google_region='us-central1' \
        TF_VAR_bigquery_region='US' \
        TF_VAR_parsers='["cloud-build","github"]' \
        ./install.sh

  - id: Check Installation
    name: 'gcr.io/$PROJECT_ID/fourkeys-builder'
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        result_check="import sys, json
        results = int(json.load(sys.stdin)[0]['vol'])
        try:
          if results < 1:
            sys.exit('Table is empty')
        except Exception as e:
          sys.exit(e)"

        echo "Checking events_raw table"
        bq query --format=json --project_id=$_TARGET_PROJECT --use_legacy_sql=false \
        'SELECT count(*) as vol FROM four_keys.events_raw' | \
         python3 -c "$result_check"

        echo "Checking deployments table"
        bq query --format=json --project_id=$_TARGET_PROJECT --use_legacy_sql=false \
        'SELECT count(*) as vol FROM four_keys.deployments' | \
         python3 -c "$result_check"

        echo "Checking changes table"
        bq query --format=json --project_id=$_TARGET_PROJECT --use_legacy_sql=false \
        'SELECT count(*) as vol FROM four_keys.changes' | \
         python3 -c "$result_check"

        echo "Checking incidents table"
        bq query --format=json --project_id=$_TARGET_PROJECT --use_legacy_sql=false \
        'SELECT count(*) as vol FROM four_keys.incidents' | \
         python3 -c "$result_check"

        echo "Checking connection to dashboard..."
        DASHBOARD_URL="$(terraform output -raw dashboard_endpoint)/d/yVtwoQ4nk/four-keys?orgId=1"
        DASHBOARD_HTTP_RESPONSE_CODE=$(curl -LI $${DASHBOARD_URL} -o /dev/null -w '%{http_code}\n' -s)
        if [ $${DASHBOARD_HTTP_RESPONSE_CODE} == "200" ]; then 
            echo "success" 
        else
            echo "Error validating dashboard URL; received $${DASHBOARD_HTTP_RESPONSE_CODE} from $${DASHBOARD_URL}"
            exit 1
        fi
         
substitutions:
  _TF_LOG: ERROR
  _TARGET_PROJECT: fourkeys-tf-tests
